package bd.org.quantum.education.admission.student;

import bd.org.quantum.authorizer.helper.UserContext;
import bd.org.quantum.common.utils.DateUtils;
import bd.org.quantum.common.utils.Image;
import bd.org.quantum.common.utils.ImageService;
import bd.org.quantum.common.utils.Misc;
import bd.org.quantum.education.common.Constants;
import bd.org.quantum.education.common.ReportData;
import bd.org.quantum.education.common.ReportHeader;
import bd.org.quantum.education.common.ReportType;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
public class StudentReportService {
    private final ImageService imageService;
    private final StudentReportDao studentReportDao;

    public StudentReportService(ImageService imageService, StudentReportDao studentReportDao) {
        this.imageService = imageService;
        this.studentReportDao = studentReportDao;
    }

    public ReportData generateApplicantReports(StudentReportCriteria criteria) {
        Map<String, Object> result = new LinkedHashMap<>();

        String department = "";
        String title = Misc.getReadableName(criteria.getReportType());
        String subTitle = "";
        String duration = "";
        String orientation = Constants.PAGE_LANDSCAPE;
        String pageSize = "";
        String view = "";

        if (ReportType.QUANTAA_LIST.name().equals(criteria.getReportType())) {
            List<StudentDto> studentList = studentReportDao.getStudentList(criteria);

            studentList.forEach(student -> {
                if (!StringUtils.isEmpty(student.getImagePath())) {
                    Image image = imageService.downloadImg(student.getImagePath());
                    student.setBase64(image.getData());
                }
            });

            result.put("data", studentList);
            view = "student-list-with-image";
        }
        return new ReportData(new ReportHeader(department, title, subTitle, duration), getFooterText(), orientation, pageSize, view, result);
    }

    private String getFooterText(){
        String currentDateTime = DateUtils.formatToDDMMYYYYHHMMSSA(new Date());
        return String.format("Generated By %s on %s", UserContext.getPrincipal().getUserDetails().getName(), currentDateTime);
    }
}
